{"version":3,"sources":["Components/Section/Section.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Statistics/Statistics.jsx","Components/Notification/Notification.jsx","Components/App/App.jsx","index.js"],"names":["Title","styled","h1","Section","title","children","Container","div","Button","button","FeedbackOptions","incrementGood","incrementNeutral","incrementBad","type","onClick","Div","TextTotal","p","Statistics","good","neutral","bad","total","positivePercentage","Text","Notification","message","App","state","setState","prevState","countTotalFeedback","Object","values","reduce","acc","num","countPositiveFeedbackPercentage","totalFeedback","Math","floor","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAGMA,EAAQC,IAAOC,GAAV,iDASIC,EANC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACZ,oCACI,cAACL,EAAD,UAAQI,IACPC,MCLIC,EAAYL,IAAOM,IAAV,gDAGhBC,EAASP,IAAOQ,OAAV,oIAiBGC,EAXS,SAAC,GAAD,IAAEC,EAAF,EAAEA,cAAeC,EAAjB,EAAiBA,iBAAkBC,EAAnC,EAAmCA,aAAnC,OACpB,mCACI,cAAC,EAAD,CAAST,MAAM,wBAAf,SACI,eAACE,EAAD,WACI,cAACE,EAAD,CAAQM,KAAK,SAASC,QAASJ,EAA/B,kBACA,cAACH,EAAD,CAAQM,KAAK,SAASC,QAASH,EAA/B,qBACA,cAACJ,EAAD,CAAQM,KAAK,SAASC,QAASF,EAA/B,yBCfVG,EAAMf,IAAOM,IAAV,4HAMHU,EAAYhB,IAAOiB,EAAV,gGAqBAC,EAhBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACf,mCACI,cAAC,EAAD,CAASpB,MAAM,aAAf,SACK,eAACE,EAAD,WACG,eAACU,EAAD,WACI,uCAAUI,KACV,0CAAaC,KACb,sCAASC,QAEb,eAACL,EAAD,qBAAmBM,KACnB,oDAAuBC,EAAvB,gBCtBVC,EAAOxB,IAAOiB,EAAV,iDAMKQ,EAHM,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACjB,cAACF,EAAD,UAAOE,KC+DIC,E,4MA9DXC,MAAQ,CACJT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTX,cAAgB,WACZ,EAAKmB,UAAS,SAAAC,GAAS,MAAK,CACxBX,KAAMW,EAAUX,KAAO,O,EAI/BR,iBAAmB,WACf,EAAKkB,UAAS,SAAAC,GAAS,MAAK,CACxBV,QAASU,EAAUV,QAAU,O,EAIrCR,aAAe,WACX,EAAKiB,UAAS,SAAAC,GAAS,MAAK,CACxBT,IAAKS,EAAUT,IAAM,O,EAI7BU,mBAAqB,WAEjB,OADsBC,OAAOC,OAAO,EAAKL,OAAOM,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAOC,IAAM,I,EAIvFC,gCAAkC,SAAClB,EAAMmB,GACrC,GAAsB,IAAlBA,EAIJ,OADmBC,KAAKC,MAAOrB,EAAOmB,EAAiB,M,4CAI3D,WACI,MAA+BG,KAAKb,MAA5BT,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBiB,EAAgBG,KAAKV,qBAE3B,OACI,qCACI,cAAC,EAAD,CACIrB,cAAe+B,KAAK/B,cACpBC,iBAAkB8B,KAAK9B,iBACvBC,aAAc6B,KAAK7B,eAEtB6B,KAAKV,qBAAuB,EACvB,cAAC,EAAD,CACFZ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,KAAKV,qBACZR,mBAAoBkB,KAAKJ,gCAAgClB,EAAMmB,KAE7D,cAAC,EAAD,CAAcZ,QAAQ,6B,GA1D1BgB,IAAMC,W,MCDxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6b7b583c.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Title = styled.h1`\r\ntext-align: center;\r\n`\r\nconst Section = ({title, children}) => (\r\n    <section>\r\n        <Title>{title}</Title>\r\n        {children}\r\n    </section>\r\n)\r\nexport default Section;","import React from 'react';\r\nimport Section from '../Section/Section';\r\nimport styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\ntext-align:center;\r\n`\r\nconst Button = styled.button`\r\n    margin-left: 20px;\r\n    border-radius: 10px;\r\n    border: 1px solid black;\r\n    padding: 5px 10px;\r\n`\r\nconst FeedbackOptions = ({incrementGood, incrementNeutral, incrementBad }) => (\r\n    <>\r\n        <Section title='Please leave feedback'>\r\n            <Container>\r\n                <Button type='button' onClick={incrementGood}>Good</Button>\r\n                <Button type='button' onClick={incrementNeutral}>Neutral</Button>\r\n                <Button type='button' onClick={incrementBad}>Bad</Button>\r\n            </Container>\r\n        </Section>\r\n    </>\r\n)\r\nexport default FeedbackOptions;","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport Section from \"../Section/Section\";\r\nimport { Container } from \"../FeedbackOptions/FeedbackOptions\";\r\nconst Div = styled.div`\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    width: 400px;\r\n    margin: 0 auto;\r\n`\r\nconst TextTotal = styled.p`\r\nborder: 2px solid red;\r\ndisplay: inline-block;\r\npadding: 5px 15px;\r\n`;\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n    <>\r\n        <Section title='Statistics'>\r\n             <Container>\r\n                <Div>\r\n                    <p>Good: {good}</p>\r\n                    <p>Neutral: {neutral}</p>\r\n                    <p>Bad: {bad}</p>\r\n                </Div>\r\n                <TextTotal>Total: {total}</TextTotal>\r\n                <p>Positive feedback: {positivePercentage} %</p>\r\n            </Container>\r\n        </Section>\r\n    </>\r\n)\r\n    \r\nexport default Statistics;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Text = styled.p`\r\ntext-align: center;\r\n`\r\nconst Notification = ({message}) => (\r\n    <Text>{message}</Text>\r\n)\r\nexport default Notification;","import React from 'react';\r\n\r\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\r\nimport Statistics from '../Statistics/Statistics';\r\nimport Notification from '../Notification/Notification';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0\r\n    };\r\n\r\n    incrementGood = () => {\r\n        this.setState(prevState => ({\r\n            good: prevState.good + 1\r\n        }))\r\n    }\r\n\r\n    incrementNeutral = () => {\r\n        this.setState(prevState => ({\r\n            neutral: prevState.neutral + 1\r\n        }))\r\n    }\r\n\r\n    incrementBad = () => {\r\n        this.setState(prevState => ({\r\n            bad: prevState.bad + 1\r\n        }))\r\n    }\r\n\r\n    countTotalFeedback = () => {\r\n        const totalFeedback = Object.values(this.state).reduce((acc, num) => (acc += num), 0);\r\n        return totalFeedback;\r\n    }\r\n\r\n    countPositiveFeedbackPercentage = (good, totalFeedback) => {\r\n        if (totalFeedback === 0) {\r\n            return;\r\n        }\r\n        const percentage = Math.floor((good / totalFeedback) * 100);\r\n        return percentage;\r\n    }\r\n\r\n    render() {\r\n        const { good, neutral, bad } = this.state;\r\n        const totalFeedback = this.countTotalFeedback();\r\n\r\n        return (\r\n            <>\r\n                <FeedbackOptions\r\n                    incrementGood={this.incrementGood}\r\n                    incrementNeutral={this.incrementNeutral}\r\n                    incrementBad={this.incrementBad}\r\n                />\r\n                {this.countTotalFeedback() > 0\r\n                    ? <Statistics\r\n                    good={good}\r\n                    neutral={neutral}\r\n                    bad={bad}\r\n                    total={this.countTotalFeedback()}\r\n                    positivePercentage={this.countPositiveFeedbackPercentage(good, totalFeedback)}\r\n                    />\r\n                    : <Notification message='No feedback given'/>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App/App'\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}